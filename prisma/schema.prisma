generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Group relationships
  createdGroups Group[]        @relation("GroupCreator")
  memberships   GroupMember[]
  contributions Contribution[]
  expenses      Expense[]

  // Invitations
  sentInvitations     GroupInvitation[] @relation("InvitationSender")
  receivedInvitations GroupInvitation[] @relation("InvitationReceiver")

  @@map("users")
}

model Contribution {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  groupId   String?  @db.ObjectId  // Made optional for migration
  amount    Float
  month     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Expense {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  groupId       String?       @db.ObjectId  // Made optional for migration
  title         String
  category      String
  amount        Float
  date          DateTime
  paymentSource PaymentSource
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group         Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Group {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  inviteCode        String             @unique
  monthlyAmount     Float?             // Amount per person per month
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  creatorId         String             @db.ObjectId
  creator           User               @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members           GroupMember[]
  contributions     Contribution[]
  expenses          Expense[]
  invitations       GroupInvitation[]

  @@map("groups")
}

model GroupMember {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  groupId   String          @db.ObjectId
  role      GroupMemberRole @default(MEMBER)
  joinedAt  DateTime        @default(now())

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupInvitation {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String            @db.ObjectId
  senderId   String            @db.ObjectId
  receiverId String?           @db.ObjectId  // null for email invitations
  email      String?                         // for inviting non-users
  status     InvitationStatus  @default(PENDING)
  createdAt  DateTime          @default(now())
  expiresAt  DateTime

  group      Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender     User              @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?             @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("group_invitations")
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentSource {
  COLLECTED
  POCKET
}
